import pandas as pd
import numpy as np

'''
Dataframe — это табличная структура данных, напоминающая таблицы из Microsoft Excel. Ее главная задача — позволить 
использовать многомерные Series. Dataframe состоит из упорядоченной коллекции колонок, каждая из которых содержит
значение разных типов (числовое, строковое, булевое и так далее).
Dataframe можно воспринимать как словарь (dict), состоящий из Series, где ключи — названия колонок, 
а значения — объекты Series, которые формируют колонки самого объекта Dataframe. 
Наконец, все элементы в каждом объекте Series связаны в соответствии с массивом меток, называемым index.
'''

'''
Простейший способ создания Dataframe — передать объект dict в конструктор DataFrame(). 
Объект dict содержит ключ для каждой колонки, которую требуется определить, а также массив значений для них.

Если объект dict содержит больше данных, чем требуется, можно сделать выборку. 
Для этого в конструкторе Dataframe нужно определить последовательность колонок с помощью параметра column. 
Колонки будут созданы в заданном порядке вне зависимости от того, как они расположены в объекте dict.
'''

data = {'color': ['blue', 'green', 'yellow', 'red', 'white'],
        'object': ['ball', 'pen', 'pencil', 'paper', 'mug'],
        'price': [12.0, 1.2, 74.9, 0.9, 1.7]}
frame = pd.DataFrame(data)
'''
    color  object  price
0    blue    ball   12.0
1   green     pen    1.2
2  yellow  pencil   74.9
3     red   paper    0.9
4   white     mug    1.7
'''

'''
Также для объектов Dataframe если метки явно не заданы в массиве index, pandas автоматически присваивает числовую
последовательность, начиная с нуля.
Вместо использования объекта dict можно определить три аргумента в конструкторе в следующем порядке: 
матрицу данных, массив значений для параметра index и массив с названиями колонок для параметра columns.
Колонке с индексами вы также можете дать название следующей командой:

my_df.columns.name = 'Your name'

В большинстве случаев простейший способ создать матрицу значений — использовать np.arrange(16).reshape((4,4)). 
Это формирует матрицу размером 4х4 из чисел от 0 до 15.
'''

frame3 = pd.DataFrame(np.arange(16).reshape((4,4)),
                      index=['red', 'blue', 'yellow', 'white'],
                      columns=['ball', 'pen', 'pencil', 'paper'])
'''
        ball  pen  pencil  paper
red        0    1       2      3
blue       4    5       6      7
yellow     8    9      10     11
white     12   13      14     15
'''

# print(frame.columns)  --> Index(['color', 'object', 'price'], dtype='object')
# print(frame.index)  -- RangeIndex(start=0, stop=5, step=1)
'''
print(frame.values) -->

[['blue' 'ball' 12.0]
 ['green' 'pen' 1.2]
 ['yellow' 'pencil' 74.9]
 ['red' 'paper' 0.9]
 ['white' 'mug' 1.7]]
'''

'''
Указав в квадратных скобках название колонки, можно получить значений в ней.
print(frame['price'])  -->
0    12.0
1     1.2
2    74.9
3     0.9
4     1.7
Name: price, dtype: float64
'''

'''
Возвращаемое значение — объект Series. Название колонки можно использовать и в качестве атрибута.
print(frame.price)  -->
0    12.0
1     1.2
2    74.9
3     0.9
4     1.7
Name: price, dtype: float64
'''
'''
Для строк внутри Dataframe используется атрибут loc со значением индекса нужной строки.
print(frame.loc[3])
color       red
object    paper
price       0.9
Name: 3, dtype: object
'''
'''
Возвращаемый объект — это снова Series, где названия колонок — это уже метки массива индексов, 
а значения — данные Series.

Для выбора нескольких строк можно указать массив с их последовательностью.
print(frame.loc[[2, 4]])
    color  object  price
2  yellow  pencil   74.9
4   white     mug    1.7
'''
'''
Если необходимо извлечь часть Dataframe с конкретными строками, для этого можно использовать номера индексов. 
Она выведет данные из соответствующей строки и названия колонок.
print(frame[0:1])
  color object  price
0  blue   ball   12.0

print(frame[1:3])
    color  object  price
1   green     pen    1.2
2  yellow  pencil   74.9
'''
'''
Наконец, если необходимо получить одно значение из объекта, сперва нужно указать название колонки, 
а потом — индекс или метку строки.
print(frame['object'][3]) --> paper
'''
