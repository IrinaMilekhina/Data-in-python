import pandas as pd
import numpy as np

'''
Series — это объект библиотеки pandas, спроектированный для представления одномерных структур данных, 
похожих на массивы, но с дополнительными возможностями. 
Его структура проста, ведь он состоит из двух связанных между собой массивов. 
Основной содержит данные (данные любого типа NumPy), а в дополнительном, index, хранятся метки.
'''

ser = pd.Series([24, -8, 222, 3])
'''
0     24
1     -8
2    222
3      3
dtype: int64
'''

'''
Если не определить индекс при объявлении объекта, метки будут соответствовать положению элементов в массиве 
(то есть пронумерованы по возрастанию).
Однако лучше создавать Series, используя метки с неким смыслом, чтобы в будущем отделять и идентифицировать данные 
вне зависимости от того, в каком порядке они хранятся.
В таком случае необходимо будет при вызове конструктора включить параметр index и присвоить ему массив строк с метками.
'''

ser_2 = pd.Series([24, -8, 222, 3], index=['a', 'b', 'c', 'd'])
'''
a     24
b     -8
c    222
d      3
dtype: int64
'''


# Если необходимо увидеть оба массива, из которых состоит структура, можно вызвать два атрибута: index и values.
# print(ser_2.values) --> [ 24  -8 222   3]
# print(ser_2.index)  --> Index(['a', 'b', 'c', 'd'], dtype='object')

# Новый объект Series можно создать из массивов NumPy и уже существующих Series.

array_1 = np.array([5, 6, 7, 8])
ser_3 = pd.Series(array_1)
'''
0    5
1    6
2    7
3    8
dtype: int32
'''

ser_4 = pd.Series(ser)
'''
0     24
1     -8
2    222
3      3
dtype: int64
'''

'''
Важно запомнить, что значения в массиве NumPy или исходном объекте Series не копируются, а передаются по ссылке. 
Это значит, что элементы объекта вставляются динамически в новый Series. Если исходный объект меняется , то 
в новом объекте тоже отображаются все изменения.
'''

array_1[3] = -22
'''
print(ser_3)
0     5
1     6
2     7
3   -22
dtype: int32
'''
